cd /
starting from the root directory

cd ~
starting from my home directory

cd ..
one directory up

mkdir
create a directory (mkdir dir1 dir2 dir3)

mkdir -p dir4/dir5/dir6
creates parent directory and sub directories

ls > output.txt
creates a file

cp original.txt duplicate.txt
creates a copy of original named as duplicate

cp seasonal/autumn.csv seasonal/winter.csv backup
copies autumn and winter to backup directory

mv autumn.csv winter.csv ..
moves autumn and winter to parent directory

rm thesis.txt backup/thesis-2017-08.txt
removes both thesis files

rmdir people/
removes people directory

echo "This is a test"
prints the statement

echo "This is a test" > test_1.txt
creates a file

cat test_1.txt
opens the file

?
any single character

cat test_?.txt
writes all text_1.txt, text_2.txt, text_3.txt etc.

*
zero or more characters

cat test_*
writes all text_1.txt, text_2.txt, text_3.txt etc.

cat t* > combined.txt
assigns concatenated result to combined.txt

echo "I've appended a line!"
combined.txt  double ">" character appends

less combined.txt
opens file

head seasonal/summer.csv
displays the start of a file

ls -R
comprehensive ls

man head
brings manual for head command

cut -f 2-5,8 -d , values.csv
select columns 2 through 5 and columns 8, using comma as the separator

history
brings the log of commands

!n
runs n'th command in history

grep bicuspid seasonal/winter.csv 
prints lines from winter.csv that contain "bicuspid".
-c: print a count of matching lines rather than the lines themselves
-h: do not print the names of files when searching multiple files
-i: ignore case (e.g., treat "Regression" and "regression" as matches)
-l: print the names of files that contain matches, not the matches
-n: print line numbers for matching lines
-v: invert the match, i.e., only show lines that don't match

head -n 5 seasonal/summer.csv > top.csv
head's output is put in a new file called top.csv

head -n 5 seasonal/summer.csv | tail -n 3
The pipe symbol tells the shell to use the output of the command on the left as the input to the command on the right.

grep 2017-07 seasonal/spring.csv | wc -l
counts how many records in seasonal/spring.csv have dates in July 2017 

wc
prints the number of characters, words, and lines in a file
-c 
-w
-l

cut -d , -f 1 seasonal/*
brings first column of every file in seasonal drectory

* zero or more characters
? matches a single character
201?.txt will match 2017.txt or 2018.txt
[...] matches any one of the characters inside the square brackets
201[78].txt matches 2017.txt or 2018.txt
{...} matches any of the comma-separated patterns inside the curly brackets
{*.txt, *.csv} matches any file whose name ends with .txt or .csv

sort 
puts data in order

uniq
removes duplicates

cut -d , -f 2 seasonal/winter.csv | grep -v Tooth | sort | uniq -c
gets the second column from seasonal/winter.csv,
removes the word "Tooth" from the output so that only tooth names are displayed,
sorts the output so that all occurrences of a particular tooth name are adjacent; and
displays each tooth name once along with a count of how often it occurs.

ctrl + C
stops the command run

environment variables
HOME	User's home directory	                /home/emre
PWD	Present working directory	        Same as pwd command
SHELL	Which shell program is being used	/bin/bash
USER	User's ID	                       emre

The other kind of variable is called a shell variable, which is like a local variable in a programming language.
To create a shell variable, you simply assign a value to a name:
training=seasonal/summer.csv
without any spaces before or after the = sign. 

Once you have done this, you can check the variable's value with:
echo $training

for filetype in gif jpg png; do echo $filetype; done

gif
jpg
png

nano file.txt
texteditor
Ctrl + K: delete a line.
Ctrl + U: un-delete a line.
Ctrl + O: save the file ('O' stands for 'output'). You will also need to press Enter to confirm the filename!
Ctrl + X: exit the editor.

For example, if unique-lines.sh contains sort $@ | uniq, when you run:
" bash unique-lines.sh seasonal/summer.csv "
the shell replaces $@ with seasonal/summer.csv and processes one file. If you run this:
" bash unique-lines.sh seasonal/summer.csv seasonal/autumn.csv "
it processes two data files, and so on.
